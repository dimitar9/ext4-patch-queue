ext4: introduce own superblock dirty flag

From: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>

We finally do not need VFS's 's_dirt' flag in ext4 - introduce our own
's_dirty' flag instead.

Note: the final goal is to get rid of the 'sync_supers()' kernel
thread which wakes up every 5 seconds and even if there is nothing to
do.  Thus, we are pushing superblock management from VFS down to
file-systems.

Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---
 fs/ext4/ext4.h  |    1 +
 fs/ext4/super.c |   12 ++++++------
 2 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 87e8376..be15b2d 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -1158,6 +1158,7 @@ struct ext4_sb_info {
 	u32 s_hash_seed[4];
 	int s_def_hash_version;
 	int s_hash_unsigned;	/* 3 if hash should be signed, 0 if not */
+	int s_dirty;
 	struct percpu_counter s_freeclusters_counter;
 	struct percpu_counter s_freeinodes_counter;
 	struct percpu_counter s_dirs_counter;
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index 64f3a6a..e24dec2 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -824,7 +824,7 @@ static void ext4_put_super(struct super_block *sb)
 		EXT4_CLEAR_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_RECOVER);
 		es->s_state = cpu_to_le16(sbi->s_mount_state);
 	}
-	if (sb->s_dirt || !(sb->s_flags & MS_RDONLY))
+	if (sbi->s_dirty || !(sb->s_flags & MS_RDONLY))
 		ext4_commit_super(sb, 1);
 
 	if (sbi->s_proc) {
@@ -4140,7 +4140,7 @@ static int ext4_commit_super(struct super_block *sb, int sync)
 	if (!sbh || block_device_ejected(sb))
 		return error;
 
-	sb->s_dirt = 0;
+	sbi->s_dirty = 0;
 	/*
 	 * Make sure we first mark the superblock as clean and then start
 	 * writing it out.
@@ -4225,7 +4225,7 @@ static void write_super(struct work_struct *work)
 	kfree(sbwork);
 
 	smp_rmb();
-	if (!sb->s_dirt)
+	if (!EXT4_SB(sb)->s_dirty)
 		return;
 
 	lock_super(sb);
@@ -4241,9 +4241,9 @@ void __ext4_mark_super_dirty(struct super_block *sb)
 
 	/* Make sure we see 's_dirt' changes ASAP */
 	smp_rmb();
-	if (sb->s_dirt == 1)
+	if (sbi->s_dirty == 1)
 		return;
-	sb->s_dirt = 1;
+	sbi->s_dirty = 1;
 	/* Make other CPUs see the 's_dirt' change as soon as possible */
 	smp_wmb();
 
@@ -4254,7 +4254,7 @@ void __ext4_mark_super_dirty(struct super_block *sb)
 		 * trouble anyway, and the SB will be written out on unmount or
 		 * we may be luckier next time it is marked as dirty.
 		 */
-		sb->s_dirt = 2;
+		sbi->s_dirty = 2;
 		return;
 	}
 
-- 
1.7.7.6


