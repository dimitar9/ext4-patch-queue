ext4: add a delayed allocation debugging ioctl

The debugging code must be triggered as root, using the following
program:

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/ioctl.h>

#if (!defined(EXT4_IOC_DEBUG_DELALLOC) && defined(__linux__))
#define EXT4_IOC_DEBUG_DELALLOC		_IO('f', 42)
#endif

int main(int argc, char **argv)
{
	int	fd;

	if (argc != 2) {
		fprintf(stderr, "Usage: %s disk\n", argv[0]);
		exit(1);
	}
	fd = open(argv[1], O_RDONLY, 0);
	if (fd < 0) {
		perror("open");
		exit(1);
	}
	if (ioctl(fd, EXT4_IOC_DEBUG_DELALLOC, 0) < 0) {
		perror("ioctl EXT4_IOC_DEBUG_DELALLOC");
		exit(1);
	}
	return 0;
}

Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---
 fs/ext4/ext4.h  |    2 +
 fs/ext4/ioctl.c |   65 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 67 insertions(+), 0 deletions(-)

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index f6d0e0e..262c253 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -604,6 +604,8 @@ enum {
 /* Max physical block we can address w/o extents */
 #define EXT4_MAX_BLOCK_FILE_PHYS	0xFFFFFFFF
 
+#define EXT4_IOC_DEBUG_DELALLOC		_IO('f', 42)
+
 /*
  * Structure of an inode on the disk
  */
diff --git a/fs/ext4/ioctl.c b/fs/ext4/ioctl.c
index b81a5f1..1f2a349 100644
--- a/fs/ext4/ioctl.c
+++ b/fs/ext4/ioctl.c
@@ -20,6 +20,17 @@
 
 #define MAX_32_NUM ((((unsigned long long) 1) << 32) - 1)
 
+static void print_inode_dealloc_info(struct inode *inode)
+{
+	if (!EXT4_I(inode)->i_reserved_data_blocks ||
+	    !EXT4_I(inode)->i_reserved_meta_blocks)
+		return;
+
+	printk(KERN_DEBUG "ino %lu: %u %u\n", inode->i_ino,
+	       EXT4_I(inode)->i_reserved_data_blocks,
+	       EXT4_I(inode)->i_reserved_meta_blocks);
+}
+
 long ext4_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 {
 	struct inode *inode = filp->f_dentry->d_inode;
@@ -429,6 +440,59 @@ resizefs_out:
 		return 0;
 	}
 
+	case EXT4_IOC_DEBUG_DELALLOC:
+	{
+#ifndef MODULE
+		extern spinlock_t inode_sb_list_lock;
+#endif
+		struct super_block *sb = inode->i_sb;
+		struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);
+		struct inode *inode;
+
+		if (!capable(CAP_SYS_ADMIN))
+			return -EPERM;
+
+		printk(KERN_DEBUG "EXT4-fs debug delalloc of %s\n", sb->s_id);
+		printk(KERN_DEBUG "EXT4-fs: dirty clusters %lld free clusters %lld\n",
+		       percpu_counter_sum(&sbi->s_dirtyblocks_counter),
+		       percpu_counter_sum(&sbi->s_freeclusters_counter));
+#ifdef MODULE
+		/* Yuck; but the inode_lock spinlock is not exported */
+		lock_kernel();
+#else
+		spin_lock(&inode_sb_list_lock);
+#endif
+		if (!list_empty(&sb->s_bdi->wb.b_dirty)) {
+			printk(KERN_DEBUG "s_bdi->wb.b_dirty list:\n");
+			list_for_each_entry(inode, &sb->s_bdi->wb.b_dirty,
+					    i_wb_list) {
+				print_inode_dealloc_info(inode);
+			}
+		}
+		if (!list_empty(&sb->s_bdi->wb.b_io)) {
+			printk(KERN_DEBUG "s_bdi->wb.b_io list:\n");
+			list_for_each_entry(inode, &sb->s_bdi->wb.b_io,
+					    i_wb_list) {
+				print_inode_dealloc_info(inode);
+			}
+		}
+		if (!list_empty(&sb->s_bdi->wb.b_more_io)) {
+			printk(KERN_DEBUG "s_bdi->wb.b_more_io list:\n");
+			list_for_each_entry(inode, &sb->s_bdi->wb.b_more_io,
+					    i_wb_list) {
+				print_inode_dealloc_info(inode);
+			}
+		}
+#ifdef MODULE
+		lock_kernel();
+#else
+		spin_unlock(&inode_sb_list_lock);
+#endif
+		printk(KERN_DEBUG "ext4 debug delalloc done\n");
+		return 0;
+	}
+
+
 	default:
 		return -ENOTTY;
 	}
@@ -492,6 +556,7 @@ long ext4_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case EXT4_IOC_MOVE_EXT:
 	case FITRIM:
 	case EXT4_IOC_RESIZE_FS:
+	case EXT4_IOC_DEBUG_DELALLOC:
 		break;
 	default:
 		return -ENOIOCTLCMD;
